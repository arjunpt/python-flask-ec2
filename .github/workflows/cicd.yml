# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        export PYTHONPATH=src
        pytest  test/test.py
    # - name: Test with pylint
    #   run: |
    #     pylint src/
    # - name: Trivy FS Scan setup
    #   run: |
    #     curl -O https://raw.githubusercontent.com/arjunpt/python-flask-ec2/main
    #     chmod +x setup.sh
    #     ./setup.sh
    # - name: Trivy FS Scan
    #   run: |
    #    ls -R ./src
    #    trivy fs --format sarif --output trivy-results.sarif ./src
    - name: bandit Scan
      run: |
        pip install bandit
        bandit -r /src

    - name: Set up SSH key and whitelist EC2 IP address 
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Verify SSH Connection 
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "ls /home/${{ secrets.EC2_USERNAME }}"
      

    - name: Create .env file dynamically 
      env:
        ENV: ${{ secrets.ENV }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "ENV=${ENV}" >> env
        echo "EC2_USERNAME=${EC2_USERNAME}" >> env

    - name: Copy files to remote server ðŸš™
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        scp -r * $EC2_USERNAME@$EC2_HOST:/home/ubuntu/

    - name: Run Bash Script To Delpoy App ðŸš€
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "chmod +x ./deploy.sh && ./deploy.sh"
        


    
